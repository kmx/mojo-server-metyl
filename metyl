#!/usr/bin/env perl

use threads;
use threads::shared;

use 5.010;
use strict;
use warnings;

use Socket qw(IPPROTO_TCP TCP_NODELAY);
use IO::Select;
use IO::Socket::INET;
use Thread::Queue::Duplex;
use Time::HiRes 'time';
use Time::Piece 'localtime';
use Getopt::Long;
use IO::Socket::SSL; # to be thread-safe has to loaded in the main thread

### global variables

my $addr = 'localhost';
my $port =  3000;
my $workers = 4;

### functions

sub thread_dispatcher {
  my ($TQ_handles, $TQ_logs) = @_;

  $TQ_handles->[$_]->wait_for_listener() for (0..$workers-1);
  $TQ_logs->wait_for_listener();

  my $listener = IO::Socket::INET->new(
                               LocalAddr =>$addr,
                               LocalPort =>$port,
                               Proto     =>'tcp',
                               Listen    =>SOMAXCONN,
                               ReuseAddr =>1,
                               Blocking  => 0,
                               Type      => SOCK_STREAM,
                 ) or die "FATAL: Can't start listening: $!";

  my $read_selector = IO::Select->new();
  $read_selector->add($listener);

  my $accept_count = 0;
  my %clients;

  $TQ_logs->enqueue(threads->tid, "Info", "entering dispatcher loop, listening at '$addr:$port'");

  while (1) {
    my @a = $read_selector->can_read(0.25);
    for my $s (@a) {
      my $fd = $s->accept();
      next unless $fd;
      my $w = $accept_count++ % $workers;
      my $id = $TQ_handles->[$w]->enqueue('newfd', $fd->fileno);
      $clients{"$w.$id"} = $fd;
    }
    for my $w (0..$workers-1) {
      my @i = $TQ_handles->[$w]->available;
      next unless defined $i[0]; #if none available: @i = (undef);
      for my $id (@i) { 
        $TQ_handles->[$w]->dequeue_response($id);
        delete $clients{"$w.$id"}; # will be destroyed&closed automatically
      }
    }
  }

}

sub thread_logger {
  my ($TQ_logs) = @_;
  $TQ_logs->listen();
  while (1) {
    my ($id, $tid, $type, $msg) = @{$TQ_logs->dequeue()};
    $msg =~ s/[\n\r]*$//;
    print STDERR sprintf("#ID=%03d:TID=%03d# %s: %s\n", $id, $tid, $type, $msg);
  }
}

sub thread_worker {
  my ($wid, $TQ_handles, $TQ_logs, $mojo_app_path) = @_;
  my $tid = threads->tid();

  $TQ_logs->wait_for_listener();
  $TQ_handles->listen();

  $ENV{MOJO_REACTOR} = 'Mojo::Reactor::Poll'; # prevent Mojo::Reactor::EV as it is not thread-safe
  require Mojo::Server::Daemon;
  my $mojosrv = Mojo::Server::Daemon->new(listen =>[]); # do not listen
  $mojosrv->load_app($mojo_app_path);
  
  $mojosrv->ioloop->recurring(0.02 =>
        sub {
          while (my $dq = $TQ_handles->dequeue_nb) { # NON-BLOCKING get socket from TQ_handles queue
            my ($id, $cmd, $fn) = @$dq;
            my $socket = IO::Socket::INET->new_from_fd($fn, '+>');
            $TQ_handles->respond($id, 'handle taken'); # tell dispatcher that we took the socket
            if ($socket) {
              $socket->blocking(0);
              setsockopt($socket, IPPROTO_TCP, TCP_NODELAY, 1);

              #XXX-HACK-BEGIN: this was ripped with help of sri from Mojo::Server::Daemon::_listen
              my $id = $mojosrv->ioloop->stream(my $stream = Mojo::IOLoop::Stream->new($socket));
              # Add new connection
              my $c = $mojosrv->{connections}{$id} = { tls=>{} };
              $stream->timeout($mojosrv->inactivity_timeout);
              # Events
              $stream->on(close  =>sub { $mojosrv->_close($id) });
              $stream->on(error  =>sub { return unless $mojosrv; $mojosrv->app->log->error(pop); $mojosrv->_close($id)});
              $stream->on(read   =>sub { $mojosrv->_read($id => pop) });
              $stream->on(timeout=>sub { $mojosrv->app->log->debug('Inactivity timeout.') if $c->{tx} });
              #XXX-HACK-END:
            }
          }
        }
  );

  $TQ_logs->enqueue(threads->tid, "Info", "worker[$wid] entering mojo loop");
  $mojosrv->run;
}

### main

GetOptions( 'a|address=s' => \$addr, 'p|port=n' => \$port );
die <<"EOF" if !(my $mojo_app_path = shift);
usage: $0 [OPTIONS] [APPLICATION]

  metyl script/myapp
  metyl myapp.pl
  metyl -a 127.0.0.1 -p 80 myapp.pl

These options are available:
  -a, --address <ip>  Set IP adress you want to listen on (default: localhost)
  -p, --port <num>    Set port number you want to listen on (default: 3000)
  -w, --workers <num> Set number of worker threads (default: 4)
EOF

my @TQ_handles;
my $TQ_logs = Thread::Queue::Duplex->new(ListenerRequired => 1, MaxPending => 100);
my $TH_logger     = threads->new(\&thread_logger, $TQ_logs);

for my $w (0..$workers-1) {
  $TQ_handles[$w] = Thread::Queue::Duplex->new(ListenerRequired => 1, MaxPending => 1000);
  threads->new(\&thread_worker, $w, $TQ_handles[$w], $TQ_logs, $mojo_app_path)->detach;
}

my $TH_dispatcher = threads->new(\&thread_dispatcher, \@TQ_handles, $TQ_logs);
$TH_dispatcher->join;

die "FATAL: We should never reach this point!";
